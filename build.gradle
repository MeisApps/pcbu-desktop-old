import io.github.fvarrui.javapackager.gradle.PackageTask
import org.jetbrains.kotlin.gradle.tasks.KotlinCompile
import proguard.gradle.ProGuardTask

buildscript {
    ext.kotlin_version = '1.9.23'

    repositories {
        google()
        mavenCentral()
    }

    dependencies {
        classpath 'com.guardsquare:proguard-gradle:7.4.2'
        classpath 'io.github.fvarrui:javapackager:1.7.5'
    }
}

plugins {
    id 'idea'
    id 'application'

    id 'org.jetbrains.kotlin.jvm' version "$kotlin_version"
    id 'org.jetbrains.kotlin.plugin.serialization' version "$kotlin_version"
}
apply plugin: 'io.github.fvarrui.javapackager.plugin'

repositories {
    mavenCentral()
}

dependencies {
    implementation 'com.google.guava:guava:33.2.0-jre'
    implementation 'org.jetbrains.kotlinx:kotlinx-serialization-json:1.6.3'

    implementation 'com.formdev:flatlaf:3.4.1'
    implementation 'com.beust:jcommander:1.82'

    implementation 'com.google.zxing:core:3.5.3'
    implementation 'com.google.zxing:javase:3.5.3'

    implementation 'net.java.dev.jna:jna:5.14.0'
    implementation 'net.java.dev.jna:jna-platform:5.14.0'

    implementation 'com.squareup.okhttp3:okhttp:4.12.0'
    implementation 'org.bouncycastle:bcprov-jdk18on:1.78.1'
}

compileJava {
    sourceCompatibility = '1.8'
    targetCompatibility = '1.8'
}

tasks.withType(KotlinCompile).configureEach {
    kotlinOptions {
        jvmTarget = "1.8"
    }
}

tasks.register('copyDepJars', Copy) {
    into "$buildDir/libs/depjars/"
    from configurations.runtimeClasspath.filter {
        it.name.contains("bcprov-jdk18on")
    }
}

jar {
    manifest {
        attributes(
            'Main-Class': 'com.meisapps.pcbiounlock.InitClassLoader',
            'Class-Path': 'PCBioUnlock/bcprov-jdk18on-1.78.1.jar',
            'Module-Path': 'PCBioUnlock/bcprov-jdk18on-1.78.1.jar',
        )
        duplicatesStrategy = DuplicatesStrategy.EXCLUDE
    }
    dependsOn copyDepJars
    from("$buildDir/libs/depjars") {
        into 'libs'
    }
    from {
        configurations.runtimeClasspath.filter {
            !(it.name.contains("bcprov-jdk18on"))
        }.collect {
            it.isDirectory() ? it : zipTree(it)
        }
    }
}

tasks.register('packageWin', PackageTask) {
    mainClass = 'com.meisapps.pcbiounlock.InitClassLoader'
    runnableJar = new File('build/libs/PCBioUnlockDesktop_obf.jar')
    bundleJre = false
    generateInstaller = false
    copyDependencies = false
    administratorRequired = true
    jreMinVersion = '1.8'
    platform = 'windows'
}

tasks.register('packageLinux', PackageTask) {
    mainClass = 'com.meisapps.pcbiounlock.InitClassLoader'
    runnableJar = new File('build/libs/PCBioUnlockDesktop_obf.jar')
    bundleJre = false
    generateInstaller = false
    copyDependencies = false
    jreMinVersion = '1.8'
    platform = 'linux'
}

tasks.register('proguard', ProGuardTask) {
    configuration 'proguard-rules.pro'
    verbose

    injars 'build/libs/pcbu-desktop.jar'
    outjars 'build/libs/PCBioUnlockDesktop_obf.jar'

    libraryjars "/usr/lib/jvm/jre-1.8.0-openjdk/lib/rt.jar"
    libraryjars "/usr/lib/jvm/jre-1.8.0-openjdk/lib/jce.jar"
    libraryjars "C:/Users/fabian/.jdks/temurin-1.8.0_382/jre/lib/rt.jar"
    libraryjars "C:/Users/fabian/.jdks/temurin-1.8.0_382/jre/lib/jce.jar"
    /*fileTree("${System.properties['java.home']}\\jmods\\") {
        forEach() {
            libraryjars "${it.path}"
        }
    }*/

    printmapping 'build/libs/out.map'
    renamesourcefileattribute 'SourceFile'
    keepattributes 'SourceFile,LineNumberTable,RuntimeVisibleAnnotations'
    keepattributes '*Annotation*'

    keepclasseswithmembers 'public class * { \
        public static void main(java.lang.String[]); \
    }'
    keepclasseswithmembernames includedescriptorclasses: true, 'class * { \
        native <methods>; \
    }'
    keepclassmembers allowoptimization: true, 'enum * { \
        public static **[] values(); \
        public static ** valueOf(java.lang.String); \
    }'
    keepclassmembers 'class * implements java.io.Serializable { \
        static final long serialVersionUID; \
        static final java.io.ObjectStreamField[] serialPersistentFields; \
        private void writeObject(java.io.ObjectOutputStream); \
        private void readObject(java.io.ObjectInputStream); \
        java.lang.Object writeReplace(); \
        java.lang.Object readResolve(); \
    }'
}
